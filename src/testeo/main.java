/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package testeo;

import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.ResultSet;
import java.sql.DatabaseMetaData;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Jafet
 */
public class main extends javax.swing.JFrame {
    
    boolean sqlServerTrue = false;
    boolean mariaDBTrue = false;
    ConexionSqlServer connectTempSql;
    ConexionMariaDB connectTempMariaDB;
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jl_replicando = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jl_replicar = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bd_or = new javax.swing.JTextField();
        inst_or = new javax.swing.JTextField();
        port_or = new javax.swing.JTextField();
        user_or = new javax.swing.JTextField();
        probar_or = new javax.swing.JButton();
        bd_des = new javax.swing.JTextField();
        inst_des = new javax.swing.JTextField();
        port_des = new javax.swing.JTextField();
        user_des = new javax.swing.JTextField();
        probar_des = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pass_or = new javax.swing.JPasswordField();
        pass_des1 = new javax.swing.JPasswordField();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel14.setText("Tablas BD Origen");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel15.setText("Sin Replicar");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel16.setText("Replicando");

        jScrollPane1.setViewportView(jl_replicando);

        jScrollPane2.setViewportView(jl_replicar);

        jButton2.setText("->");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        jButton3.setText("↺");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(126, 126, 126))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDialog1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jButton2))
                            .addGroup(jDialog1Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(guardar)
                .addGap(44, 44, 44)
                .addComponent(cancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(8, 8, 8)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(19, 19, 19)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(10, 10, 10)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(cancelar))
                .addGap(27, 27, 27))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Configuración de Bases de Datos");
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 16));

        jLabel2.setText("Nombre Instancia");

        jLabel3.setText("Puerto");

        jLabel4.setText("Nombre Base Datos");

        jLabel5.setText("Nombre usuario");

        jLabel6.setText("Password");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel7.setText("Base de Datos Origen");

        probar_or.setText("Probar");
        probar_or.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probar_orActionPerformed(evt);
            }
        });

        probar_des.setText("Probar");
        probar_des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probar_desActionPerformed(evt);
            }
        });

        jLabel8.setText("Nombre Instancia");

        jLabel9.setText("Puerto");

        jLabel10.setText("Nombre Base Datos");

        jLabel11.setText("Nombre usuario");

        jLabel12.setText("Password");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel13.setText("Base de Datos Destino");
        jLabel13.setToolTipText("");

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inst_des, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(bd_des)
                            .addComponent(port_des)
                            .addComponent(user_des)
                            .addComponent(pass_des1)))
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inst_or, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(bd_or)
                            .addComponent(port_or)
                            .addComponent(user_or)
                            .addComponent(pass_or, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(probar_des, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(166, 166, 166))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(probar_or)
                        .addGap(169, 169, 169))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inst_or, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bd_or, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(port_or, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(user_or, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(pass_or, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(probar_or)
                .addGap(24, 24, 24)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(inst_des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(bd_des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(port_des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(user_des, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(pass_des1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(probar_des)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void probar_orActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probar_orActionPerformed
        // TODO add your handling code here:
        String inst = "", bd = "", port = "", user = "", pass = "";
        inst = inst_or.getText();
        bd = bd_or.getText();
        port = port_or.getText();
        user = user_or.getText();
        pass = new String (pass_or.getPassword());
        try {
            ConexionMariaDB connect = new ConexionMariaDB(inst, port, bd, user, pass);
            JOptionPane.showMessageDialog(null, "Exito");
            mariaDBTrue=true;
            connectTempMariaDB=connect;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fallo");
        }
    }//GEN-LAST:event_probar_orActionPerformed

    private void probar_desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probar_desActionPerformed
        // TODO add your handling code here:
        String inst = "", bd = "", port = "", user = "", pass = "";
        inst = inst_des.getText();
        bd = bd_des.getText();
        port = port_des.getText();
        user = user_des.getText();
        pass = new String(pass_or.getPassword());
        try {
            ConexionSqlServer connect2 = new ConexionSqlServer(inst, port, bd, user, pass);
            JOptionPane.showMessageDialog(null, "Exito");
            sqlServerTrue=true;
            connectTempSql=connect2;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fallo");
        }
    }//GEN-LAST:event_probar_desActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jl_replicando.getModel().getSize()==0){
            jl_replicando.setModel(new DefaultListModel());
        }
        DefaultListModel modelo = (DefaultListModel)jl_replicando.getModel();
        if(!modelo.contains(jl_replicar.getSelectedValue()))
            modelo.addElement(jl_replicar.getSelectedValue());
        jl_replicando.setModel(modelo);
        //listarep.add(jl_replicar.getSelectedValue());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        jl_replicando.setModel(new DefaultListModel());
        
    }//GEN-LAST:event_cancelarActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
        DefaultListModel modelo1 = (DefaultListModel) jl_replicando.getModel();
        //DefaultListModel modelo2 = (DefaultListModel) jl_replicar.getModel();
        for (int i = 0; i < modelo1.getSize(); i++) {
            String o = modelo1.getElementAt(i).toString();
            listarep.add(o);
        }
        try {
            DatabaseMetaData metaData = connectTempMariaDB.conexion.getMetaData();
            for (String string : listarep) {
                Replica(sentencias, string, connectTempMariaDB, metaData);
            }
            for (String sentencia : sentencias) {
                System.out.println(sentencia);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        jl_replicando.setModel(new DefaultListModel());
        
        try {
            Statement originStmt;
            originStmt = connectTempSql.conexion.createStatement();
            for (String sentencia : sentencias) 
                originStmt.executeUpdate(sentencia);
            JOptionPane.showMessageDialog(null, "Replicacion exitosa");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Ocurrio un error al replicar");
        }
        
    }//GEN-LAST:event_guardarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (sqlServerTrue && mariaDBTrue) {
            jDialog1.setLocationRelativeTo(null);
            jDialog1.setVisible(true);
            jDialog1.pack();
            try {
                listarTablas();
            } catch (SQLException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            listarTablas();
            Statement originStmt = connectTempMariaDB.conexion.createStatement();
            originStmt.executeUpdate("DROP EVENT if exists refreshTriggers");
            originStmt.executeUpdate("CREATE EVENT refreshTriggers\n" +
                                    "ON SCHEDULE at CURRENT_TIMESTAMP\n" +
                                    "DO\n" +
                                    "    CALL CreateTriggersForAllTables();");
            originStmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    
    public void listarTablas() throws SQLException{
        jl_replicar.setModel(new DefaultListModel());
        DefaultListModel modelo = (DefaultListModel)jl_replicar.getModel();
        modelo.clear();
        Statement originStmt = connectTempMariaDB.conexion.createStatement();
        ResultSet rs = originStmt.executeQuery("select table_name from information_schema.tables where table_schema='" + connectTempMariaDB.dbName+ "' and table_name <> 'bitacora'");
        while(rs.next()){
            String nombreTabla = rs.getString(1);
            modelo.addElement(nombreTabla);
        }
        jl_replicar.setModel(modelo);
    }
    
    public static ArrayList<String> parseForeignKeys(String input) {
        // Lista para almacenar las tablas referenciadas
        ArrayList<String> referencedTables = new ArrayList<>();

        // Definir el patrón de expresión regular
        String regex = "FOREIGN KEY \\(\\w+\\) REFERENCES (\\w+) \\(\\w+\\)";
        Pattern pattern = Pattern.compile(regex);

        // Crear el objeto Matcher para buscar el patrón en la cadena de entrada
        Matcher matcher = pattern.matcher(input);

        // Procesar todas las coincidencias
        while (matcher.find()) {
            // Obtener la tabla referenciada y agregarla a la lista
            String referencedTable = matcher.group(1);
            referencedTables.add(referencedTable);
        }

        return referencedTables;
    }

    public static String convertMariaDBToSQLServer(String mariaDBSql) {
        
        boolean hasMatches = false;
        String sqlServerSql = mariaDBSql;
        do{
            sqlServerSql = mariaDBSql.replaceAll("int\\((\\d+)\\)", "int")
                         .replaceAll("varchar\\((\\d+)\\)", "varchar($1)")
                         .replaceAll("AUTO_INCREMENT", "");

            sqlServerSql = sqlServerSql.replaceAll("ENGINE=InnoDB", "");

            sqlServerSql = sqlServerSql.replaceAll("\\bKEY\\s+`[^`]+`\\s*\\([^)]*\\),", "");
            sqlServerSql = sqlServerSql.replaceAll("DEFAULT CHARSET=latin1 COLLATE=latin1_swedish_ci", "");

            
            
            sqlServerSql = sqlServerSql.replaceAll("`", "").replaceAll("`", "");


            sqlServerSql = sqlServerSql.replaceAll("CHARACTER SET [^ ]+ COLLATE [^ ]+", "");

            sqlServerSql = sqlServerSql.replaceAll("CONSTRAINT \\w+ FOREIGN KEY \\(([^)]+)\\) REFERENCES (\\w+) \\(([^)]+)\\) ON UPDATE CASCADE",
                                        "FOREIGN KEY ($1) REFERENCES $2 ($3) ON UPDATE CASCADE");
            
            sqlServerSql = sqlServerSql.replaceAll("CONSTRAINT \\w+ FOREIGN KEY \\(([^)]+)\\) REFERENCES (\\w+) \\(([^)]+)\\) ON DELETE CASCADE",
                                        "FOREIGN KEY ($1) REFERENCES $2 ($3) ON UPDATE CASCADE");
            
            sqlServerSql = sqlServerSql.replaceAll("CONSTRAINT \\w+ FOREIGN KEY \\(([^)]+)\\) REFERENCES (\\w+) \\(([^)]+)\\) ON UPDATE SET NULL",
                                        "FOREIGN KEY ($1) REFERENCES $2 ($3) ON UPDATE SET NULL");
            
            sqlServerSql = sqlServerSql.replaceAll("CONSTRAINT \\w+ FOREIGN KEY \\(([^)]+)\\) REFERENCES (\\w+) \\(([^)]+)\\) ON DELETE SET NULL",
                                        "FOREIGN KEY ($1) REFERENCES $2 ($3) ON DELETE SET NULL");
            

            
            
            if (!sqlServerSql.equals(mariaDBSql)) {
                hasMatches = true;
            }
            
        } while(hasMatches==false);
        
        


        return sqlServerSql;
    }

    public static void Replica(ArrayList<String> sentencias, String nombreTabla, ConexionMariaDB con, DatabaseMetaData metaData) throws SQLException{
        
        ArrayList<String> col = new ArrayList<>();
        String createTable = "";
        Statement originStmt = con.conexion.createStatement();
        ResultSet tabla = originStmt.executeQuery("select * from "+ nombreTabla);
        ResultSet esquemas = originStmt.executeQuery("Show create table "+ nombreTabla);
        if (esquemas.next()) {
            createTable = esquemas.getString("Create Table");
            createTable = convertMariaDBToSQLServer(createTable);
            createTable+=';';
            //System.out.prin1tln(createTable);
            ArrayList<String> referencias = parseForeignKeys(createTable);
            for (String referencia : referencias) {
                Replica(sentencias, referencia, con, metaData);
            }
            sentencias.add("IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '" + nombreTabla + "') " +
                                    "DROP TABLE " + nombreTabla + ";");
            sentencias.add(createTable);
            ResultSet columns = metaData.getColumns(null, null, nombreTabla, null);

            while (columns.next()) {
                String nombreColumna = columns.getString("COLUMN_NAME");
                //System.out.println(nombreColumna);
                col.add(nombreColumna);
            }
            while (tabla.next()){
                String insert = "insert into " + nombreTabla + " values (";
                for(int i =0; i<col.size();i++){
                    //System.out.println("Nombre de la columna: " + col.get(i));
                    String valor = obtenerValorFormateado(tabla.getObject(col.get(i)));
                    //System.out.println("Valor formateado: " + valor);
                    insert += valor;
                    if (i==col.size()-1){

                    }else{
                        insert += ",";
                    }

                }
                insert +=");";
                sentencias.add(insert);
            }
        }else{
            System.out.println("No");
        }
    }
    
    private static String obtenerValorFormateado(Object valor) {
        if (valor == null) {
            return "NULL";
        } else if (valor instanceof Integer || valor instanceof Long || valor instanceof Short) {
            return valor.toString();
        } else if (valor instanceof String) {
            // En caso de ser una cadena, envolverla en comillas simples
            return "'" + valor + "'";
        } else {
            // Otros tipos de datos podrían necesitar tratamiento adicional
            return valor.toString();
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bd_des;
    private javax.swing.JTextField bd_or;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JTextField inst_des;
    private javax.swing.JTextField inst_or;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jl_replicando;
    private javax.swing.JList<String> jl_replicar;
    private javax.swing.JPasswordField pass_des1;
    private javax.swing.JPasswordField pass_or;
    private javax.swing.JTextField port_des;
    private javax.swing.JTextField port_or;
    private javax.swing.JButton probar_des;
    private javax.swing.JButton probar_or;
    private javax.swing.JTextField user_des;
    private javax.swing.JTextField user_or;
    // End of variables declaration//GEN-END:variables
    ArrayList<String> listarep = new ArrayList<>();
    ArrayList<String> sentencias = new ArrayList<>();
}
